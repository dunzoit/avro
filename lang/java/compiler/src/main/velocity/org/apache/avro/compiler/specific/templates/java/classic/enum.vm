##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
#if ($schema.getNamespace())
package $schema.getNamespace();
#end  
@SuppressWarnings("all")
#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#foreach ($annotation in $this.javaAnnotations($schema, $GenEntity_CLASS))
@$annotation
#end
@org.apache.avro.specific.AvroGenerated
public enum ${this.mangle($schema.getName())} implements org.apache.avro.generic.GenericEnumSymbol<${this.mangle($schema.getName())}> {
  #foreach ($symbol in ${schema.getEnumSymbols()})${this.mangle($symbol)}("$esc.escapeJava($schema.getEnumStringSymbol($symbol))")#if ($velocityHasNext), #end#end
  ;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("${this.javaEscape($schema.toString())}");

  /**
   * The avro schema of this enum.
   * @return The avro schema of this enum.
   */
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  /**
   * The avro schema of this enum.
   * @exclude exclude from model introspection
   * @return The avro schema of this enum.
   */
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  private final java.lang.String strValue;

  private ${this.mangle($schema.getName())}(final java.lang.String strValue) {
    this.strValue = strValue;
  }


  @Override
  public java.lang.String toString() {
    return strValue;
  }
  
  public java.lang.String getSymbol() {
    return super.toString();
  }

}
